What is the expected running time of the following C# code? Explain why.

long CalcCount(int[,] matrix)
{
    long count = 0;
    for (int row=0; row<matrix.GetLength(0); row++)
        if (matrix[row, 0] % 2 == 0)
            for (int col=0; col<matrix.GetLength(1); col++)
                if (matrix[row,col] > 0)
                    count++;
    return count;
}

Assume the input matrix has size of n * m.

Answer:

The first for-cycle will execute n times (the number of rows).
The if check in it will be true and therefor lead to the execution of the second for-cycle only when the element 
	matrix[row,0] is even. This entierly depends on the elements in the matrix so we will have 3 types of complexities here:

Best case  :	All the elements in the matrix will be odd making the "if (matrix[row, 0] % 2 == 0)" statement
				always false and therefore never reaching the second for-cycle. 
				This means that the algorithm still runs in linear time O(n)
				The number of elementary steps is ~ n.
	
Worst case :	All the elements in the matrix will be even making the "if (matrix[row, 0] % 2 == 0)" statement
				always true and therefore always reaching the second for-cycle. 
				This means that the algorithm still runs in quadratic time O(n*m)
				The number of elementary steps is ~ n*m.

Average-case :	Half of the elements in the matrix will be even and the other half - odd
				making the "if (matrix[row, 0] % 2 == 0)" statement	true half of the times and 
				therefore reaching the second for-cycle half of the times. 
				This means that the algorithm still runs in quadratic time O(n*m)
				The number of elementary steps is ~ n*m /2.




